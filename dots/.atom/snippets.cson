# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

# for coffee/cson
'.source.coffee':
  'Coffee - snippets.cson':
    'prefix': 'snippets'
    'body': """
\t'$1':
\t'prefix': '$1'
\t'body': \"\"\"
$2
\"\"\"
"""

# for markdown
'.source.gfm':
  'Js Code Block':
    'prefix': '```js'
    'body': """
```javascript
$1
```
"""

# Javascript
'.source.js':
  'console log':
    'prefix': 'log'
    'body': 'console.log(`$1`, $1);'

  'console info':
    'prefix': 'info'
    'body': 'console.info(`$1`);'

  # js related
  'General - SetTimeout':
    'prefix': 'js_sTo'
    'body': """
setTimeout(() => {
  $1
}, 2000);
"""

  'General - new Promise':
    'prefix': 'js_promise'
    'body': """
return new Promise((resolve, reject) => {
  if (error) {
    reject(new Error(error.message));
    return;
  }

  resolve();
});
"""

  'General - for of':
    'prefix': 'js_for_of'
    'body': """
for(const key of Object.keys($1)) {
  if (true) {
    $2
  }
}
"""

  # eslint related
  'Eslint - inline disable':
    'prefix': 'eslint'
    'body': '/* eslint-disable $1 */$2/* eslint-enable */'

  # mocha related
  'Mocha':
    'prefix': 'mocha'
    'body': """
import { expect } from 'chai';

describe('$1', () => {
  it('should $2', () => {

  });
});
"""

  'Mocha - describe':
    'prefix': 'mc_describe'
    'body': """
describe('$1', () => {
  $2
});
"""

  'Mocha - it':
    'prefix': 'mc_it'
    'body': """
it('should $1', () => {
  $2
});
"""

  'Mocha - beforeEach':
    'prefix': 'mc_bE'
    'body': """
beforeEach(() => {
  $1
});
"""

  'Mocha - afterEach':
    'prefix': 'mc_aE'
    'body': """
afterEach(() => {
  $1
});
"""

  'React Story':
    'prefix': 'story'
    'body': """
import React from 'react';
import { storiesOf } from '@kadira/storybook';

import '../css/$1.css';
import $2 from '../components/$1/$2';

storiesOf('$2', module)
  .add('Basic', () => (
    <$2 />
  ));
"""

  'React Component Style':
    'prefix': 'react_class'
    'body': """
import React, { Component, PropTypes } from 'react';

class $1 extends Component {
  render() {
    return (
      <div></div>
    );
  }
}

$1.propTypes = {
  propsName: PropTypes.string.isRequired,
};

export default $1;
"""

  'React - Stateless Component':
    'prefix': 'react'
    'body': """
import React, { PropTypes } from 'react';

export default function $1({ exampleProps }) {
  return (
    <div>
      Hello {exampleProps}!
    </div>
  );
}

$1.defaultProps = {
  exampleProps: 'World',
};

$1.propTypes = {
  exampleProps: PropTypes.string.isRequired,
};
"""

  'React - PropTypes':
    'prefix': 'react_propTypes'
    'body': """
$1.propTypes = {
  $2: PropTypes.$3.isRequired,
};
"""

  'Intl - defineMessages':
    'prefix': 'intl_defineMessages'
    'body': """
const MESSAGES = defineMessages({
  $1: {
    id: '$1',
    defaultMessage: '$1',
  },
});
"""

  'Intl - defineMessages block':
    'prefix': 'intl_defineMessages_block'
    'body': """
$1: {
  id: '$1',
  defaultMessage: '$1',
},
"""

  'Intl - element':
    'prefix': 'intl_element'
    'body': """
<FormattedMessage
  id="$1"
  defaultMessage="$1"
/>
"""

  'Intl - messages':
    'prefix': 'intl_i18nMessages'
    'body': """
import i18nMessages from '$1main/constants/i18nMessages';
"""

  'Intl - props':
    'prefix': 'intl_props'
    'body': """
const { intl: { formatMessage } } = this.props;
"""

  'Intl - import':
    'prefix': 'intl_import'
    'body': """
import {
  FormattedMessage,
  defineMessages,
  injectIntl,
  intlShape,
} from 'react-intl';
"""

  'Intl - injectIntl':
    'prefix': 'intl_inject'
    'body': "export default injectIntl($1);"
